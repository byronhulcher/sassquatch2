/*doc
---
title: Layout
name: layout
category: Core
---
TK
TODO: link to separate layout visual example page
*/



/*doc
---
title: Stripe
name: stripe
parent: layout
---
A `.stipe` class should be applied to `<section>` elements
to visually divide the page with stripes of color.

To align content within a stripe, use `.bounds`.

```html_example
<section class="stripe">
	<div class="bounds">
		<p>... default stripe ...</p>
	</div>
</section>

<section class="stripe--inverted inverted">
	<div class="bounds">
		<p>... inverted stripe, using `inverted` class to set text colors  ...</p>
	</div>
</section>

<section class="stripe--collection">
	<div class="bounds">
		<p>... collection variant of stripe, used to contain collections of cards </p>
	</div>
</section>
```

*/
.stripe {
	overflow: hidden;
	border-top: 1px solid $C_border;
	background-color: #fff;
}

.stripe--collection {
	background: $C_collectionBGLight;
}

.stripe--inverted {
	background: $C_contentBGInverted;
}


// TODO: find out what's up with the bottom spacing within a stripe

/*doc
---
title: Bounds
name: bounds
parent: layout
---
Used as a non-visual content container that manages content measure,
 Similar to [sassquatch 1 `docBounds`](http://meetup.github.io/sassquatch/doc_desktop/layout.html#docstar).

Centers children with auto margin, clears floats, applies
padding, and sets a max-width.

```html_example
<section class="stripe">
	<p>This is just a paragraph inside a stripe. There's no bounds element to center and set the measure of this text.</p>
</section>

<section class="stripe">
	<div class="bounds">
		<p>This paragraph is inside a bounds. It enjoyes auto-margin and a max-width to ensure the type measure remains readable at all viewport sizes.</p>
	</div>
</section>

<section class="stripe">
	<div class="bounds _DOC-SHADE">
		<p><strong>Previous example, shaded to show detail</strong></p>
		<p>This paragraph is inside a bounds. It enjoyes auto-margin and a max-width to ensure the type measure remains readable.</p>
	</div>
</section>
```
*/
.bounds {
	@extend %clearfix;
	box-sizing: border-box;
	margin-left: auto;
	margin-right: auto;
	max-width: $bounds;
	padding: $space;
	width: 100%;
}


/*doc
---
title: Group
name: group
parent: layout
---
Groups sections of content, adding
a margin-bottom.

```html_example
<div class="_DOC-SHADE group">
	<h2>Some heading</h2>
	<p>Some text</p>
	<p class="text--caption">Some kind of caption</p>
</div>

<div class="_DOC-SHADE group">
	<h2>Some heading</h2>
	<p>Some text</p>
	<p class="text--caption">Some kind of caption</p>
</div>
```
*/
.group {
	@extend %clearfix;
	margin-bottom: $space;
}


/*doc
---
title: Flex row
name: flexRow
parent: layout
---
Arranges content in rows using `display: flex`.

The `.flexRow` class is applied to a wrapping element.

Direct children of `.flexRow` are flex children, and require
either a `.flexRow-item--grow` or `.flexRow-item--shirnk` class.

The flex children in flexRow do not have a `flex-basis` set; a
basis is not required for most common layout tasks.

_Includes `table-cell` fallback for IE8._

#### Examples:

```html_example
<div class="flexRow">
	<div class="_DOC-SHADE flexRow-item--grow">Item 1</div>
	<div class="_DOC-SHADE flexRow-item--shrink">Item 2</div>
	<div class="_DOC-SHADE flexRow-item--shrink">Item 3</div>
	<div class="_DOC-SHADE flexRow-item--grow">Item 4</div>
</div>
```

```html_example
<div class="flexRow">
	<div class="_DOC-SHADE flexRow-item--shrink">Item 1</div>
	<div class="_DOC-SHADE flexRow-item--grow">Item 2</div>
	<div class="_DOC-SHADE flexRow-item--shrink">Item 3</div>
</div>
```

```html_example
<div class="flexRow flexRow--flexEnd">
	<div class="_DOC-SHADE flexRow-item--shrink">Item 1</div>
	<div class="_DOC-SHADE flexRow-item--shrink">Item 2</div>
	<div class="_DOC-SHADE flexRow-item--shrink">Item 3</div>
</div>
```

```html_example
<div class="flexRow flexRow--spaceBetween flexRow--reverse">
	<div class="_DOC-SHADE flexRow-item--shrink">Item 1</div>
	<div class="_DOC-SHADE flexRow-item--shrink">Item 2</div>
	<div class="_DOC-SHADE flexRow-item--shrink">Item 3</div>
	<div class="_DOC-SHADE flexRow-item--shrink">Item 4</div>
</div>
```
*/
.flexRow {
	@include display(flex);
	@include flex-wrap(nowrap);
	@include flex-direction(row);
	@include justify-content(flex-start);
	@include align-items(flex);
}
%_flexRow-item {
	padding-left: $space;
	&:first-child {
		padding-left: 0;
	}
}
.flexRow-item--shrink {
	@extend %_flexRow-item;
	@include flex-shrink(1);
}
.flexRow-item--grow {
	@extend %_flexRow-item;
	@include flex-grow(1);
}


/*doc
---
title: flexRow variants
name: flexrowParent
parent: flexRow
---

A class of `.flexRow` is __required__ on the flexRow parent. The
following classes are optional variants:

Class                       | Description
--------------------------- | -------------------------------
`.flexRow--noGutters`       | removes padding from all `.flexRow-item` children
`.flexRow--reverse`         | reverses row order
`.flexRow--flexEnd`         | justifies content to `flex-end`
`.flexRow--center`          | justifies content to `center`
`.flexRow--spaceBetween`    | justifies content to `spaceBetween`
`.flexRow--spaceAround`     | justifies content to `spaceAround`
*/
.flexRow--noGutters .flexrow-item--grow,
.flexRow--noGutters .flexrow-item--shrink {
	padding: 0;
}
.flexRow--reverse {
	@include flex-direction(row-reverse);
}
@each $jName, $jprop in $flexJustifyMap {
	.flexRow--#{$jName} {
		@include justify-content($jprop);
	}
}

// LT IE9 fallback
.lt--IE9 .flexRow {
	@include box-sizing(border-box);
	display: table;
	table-layout: auto;
	width: 100%;
}
.lt--IE9 .flexRow-item--shrink,
.lt--IE9 .flexRow-item--grow {
	display: table-cell;
}
.lt--IE9 .flexRow-item--grow {
	width: 100%;
}
